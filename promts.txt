В файле resources\views\components\header-inner.blade.php сверстай блок согласно следующему описанию:

Блок это обертка над 3мя карточками выстроенными по вертикали. Промежуток между карточками 20px. Карточка обернута в тег a.
Описание карточки:

Верхняя часть карточки залита цветом из перерменной: $sub_color внутри заголовок h2 цвет текста белый шрифт из переменной $sub_fonts размер шрифта 22px

Нижняя часть фон реализован как эффект матового зеркала с прозрачностью. внутри парахраф с текстом, цвет текста черный, размер шрифта 16px, выравнивание по левому краю.

Так же в нижней части в правом нижнем углу распологается плашка цветом $sub_color размер плашки 30px на 30px. Внутри которой иконка, иконку вставь из спрайта следующим образом:

<svg class="sprite_icon">
    <use xlink:href="#vk_icon"></use>
</svg>

Иконку отцентруй относительно плашки.

Содержание заголовков в верхней части карточки:
- Металоконструкции
- Емкости
- Трубопроводы

Содержание параграфов нижней части: рыбный текст длинной до 100 символов

Стили реализуй в scss, размести их в файле public\scss\_header_card.scss, в этом файле стилей переменные импортируй из _vars.scss не используй переменные которых нет в этом файле. Сделай адаптацию под устройства.

________

В  файле gtk\resources\views\components\work-geo.blade.php под блоком с классом map_in_page сверстай блок согласно следующему описанию:

В блоке должно быть расположено 3 элемента вытянутых в линию каждый элемент будет представлять собой иконку и подпись. Данные возьми из списка:

Металоконструкции иконка - public\img\pin.svg
АЭС иконка - public\img\pin_blue.svg
Ntgkbws иконка - public\img\pin_green.svg

Стили реализуй в scss, размести их в файле public\scss\_map.scss, в этом файле стилей переменные импортируй из _vars.scss не используй переменные которых нет в этом файле. Сделай адаптацию под устройства.
________

На основе списка ниже заполни массив $data в файле ServiceSeeder.php. выдели из текста заголовок и дай минимальную разметку описанию.

Резка листового металла по чертежам заказчика
На оборудовании:
                                                                                    Лазерной резки - габариты заготовки Д*Ш*В
                        2 000*6 000*8 мм
                                                                                  Плазменной резки - габаритные размеры заготовки Д*Ш*В   2 000*6 000*35 мм



Резка проката на ленто пильном оборудование
                                                                                      Д*Ш*В
12 000*400*500 мм

Гибка листового металла по чертежам заказчика на листогибочном оборудование толщиной до 5 мм., длинна гиба 3 000 мм.
Гибка трубы по чертежам заказчика на дорновом трубогибе диаметром 60*3 мм
Вальцовка листового материала толщиной от 1,5 -4,5 мм, шириной 1300мм
 Толщина металла от 6 -28 мм шириной до 2500 мм по чертежам заказчика
Вальцовка профильной трубы 90*90 и водопроводной до диаметра 102 мм
Обжимка труб на меньший диаметр от 25-60 мм
Гибка Листового металла черн /нерж толщина 6мм/3 мм
Резка наружней резьбы до 40 мм
Сварочные работы(МП;РД;РАД;КТС;АФДС; МАДП; АФ;КСО.
Гибка арматуры на станке по чертежам заказчика диаметром до 35 мм
Дробеструйная очистка листового металла и проката
Лакокрасочное покрытия металла воздушным и безвоздушным способом

Полимерное окрашивание металла габариты ДШВ 6000*750*2000 мм мак. масса 200 кг
Штамповочное производство на оснастке заказчика . усилие прессов от25-100 тонн
Рубка листового металла на гильотинных ножницах, толщина металла до 6/3 мм длинна реза 3000 мм
_____________

В текущем файле вставь код загрузки файлов:

ase.jpg
autodor.jpg
bazu-r.jpg
egorievskii.jpg
gazprom.jpg
green.jpg
kamaz.jpg
mansurovo.jpg
nikimt.jpg
rgd.jpg
rosneft.jpg
sem.jpg
severstal.jpg
smu1.jpg
titan2.jpg

Из директории public\tmp_data\partners\new

Пример кода загрузки

Storage::disk('public')->put("partners/egor.png", file_get_contents(public_path('tmp_data/partners/egor.png')), 'public');
_____________

В текущем файле исправь массив $partners опираясь на следующий список:

АСЭ (Атом Строй Экспорт)
ГРИНН
ГАЗПРОМ
Егорьевский ТК
Северсталь
ржд
РосНефть
Базу - Русь
Камаз
АК Мансурово
Концерн Титан-2
Трест росСЭМ
Никимт Атомстрой
СМУ №1
Автодор

В каждый элемент вставь загруженные ранее изображения пример image'=>"partners/partners/ase.jpg",

________

Для ModelResource админ панели moonshine который находится в файле app\MoonShine\Resources\AdvantageResource.php проставь поля опираясь на миграцию database\migrations\2025_05_21_152823_create_advantages_table.php.

В класс ресурса добавь следующие поля:

protected string $title = 'Преимущества';
protected string $column = 'title';

В метод indexFields вынеси поля:

'title'
'order'

В методах formFields и detailFields распиши все поля кроме created_at и updated_at

При формировании полей используй ->comment в миграции в качестве имени поля. Пример: Text::make("Заголовок", 'title'),
Для полей миграции с именем img используй компонент Image так же добавляй ->dir(''), строку внутри оставляй пустой.  Пример: Image::make('Изображение', 'img')->dir(''),
Для полей миграции с именем slug используй компонент Slug.  Пример: Slug::make("Ссылка", 'slug'),
Для полей миграции с типом boolean используй компонент Switcher.  Пример: Switcher::make('По умолчанию', 'is_default'),
Для полей миграции с именем description используй компонент TinyMce.  Пример: TinyMce::make('Описание', 'description'),
Для полей миграции с типом оson используй компонент Json, с модификаторм ->fields в котором по умолчанию должно быть поле Position::make().  Пример:
Json::make('Галерея', 'images')->fields([
    Position::make(),
]),

Так же опираясь на миграцию заполни метод rules, при этом не включай поля которые в миграции помеченны nullable(), так же не включай поле slug

Так же добавь метод filters по следующему шаблону

    protected function filters(): iterable
    {
        return [

        ];
    }

В этом методе должны быть следующие поля:
 'title'
________

Для ModelResource админ панели moonshine который находится в файле app\MoonShine\Resources\StageResource.php проставь поля опираясь на миграцию database\migrations\2025_05_21_175914_create_stages_table.php.

В класс ресурса добавь следующие поля:

protected string $title = 'Преимущества';
protected string $column = 'title';

Если поля существуют замени в них содержимое.

В метод indexFields вынеси поля:

'title'
'order'

В методах formFields и detailFields распиши все поля кроме created_at и updated_at

При формировании полей используй ->comment в миграции в качестве имени поля. Пример: Text::make("Заголовок", 'title'),
Для полей миграции с именем img используй компонент Image так же добавляй ->dir(''), строку внутри оставляй пустой.  Пример: Image::make('Изображение', 'img')->dir(''),
Для полей миграции с именем slug используй компонент Slug.  Пример: Slug::make("Ссылка", 'slug'),
Для полей миграции с типом boolean используй компонент Switcher.  Пример: Switcher::make('По умолчанию', 'is_default'),
Для полей миграции с именем description используй компонент TinyMce.  Пример: TinyMce::make('Описание', 'description'),
Для полей миграции с типом оson используй компонент Json, с модификаторм ->fields в котором по умолчанию должно быть поле Position::make().  Пример:
Json::make('Галерея', 'images')->fields([
    Position::make(),
]),

Так же опираясь на миграцию заполни метод rules, при этом не включай поля которые в миграции помеченны nullable(), так же не включай поле slug

Так же добавь метод filters по следующему шаблону

    protected function filters(): iterable
    {
        return [

        ];
    }

В этом методе должны быть следующие поля:
 'title'

________

Для ModelResource админ панели moonshine который находится в файле app\MoonShine\Resources\GeograpyResource.php проставь поля опираясь на миграцию database\migrations\2025_05_28_360643_create_geograpies_table.php.

В класс ресурса добавь следующие поля:

protected string $title = 'География';
protected string $column = 'name';

Если поля существуют замени в них содержимое.

В метод indexFields вынеси поля:

'name'
'type'
'geo'

В методах formFields и detailFields распиши все поля кроме created_at и updated_at

При формировании полей используй ->comment в миграции в качестве имени поля. Пример: Text::make("Заголовок", 'title'),
Для полей миграции с именем img используй компонент Image так же добавляй ->dir(''), строку внутри оставляй пустой.  Пример: Image::make('Изображение', 'img')->dir(''),
Для полей миграции с именем slug используй компонент Slug.  Пример: Slug::make("Ссылка", 'slug'),
Для полей миграции с типом boolean используй компонент Switcher.  Пример: Switcher::make('По умолчанию', 'is_default'),
Для полей миграции с именем description используй компонент TinyMce.  Пример: TinyMce::make('Описание', 'description'),
Для полей миграции с типом оson используй компонент Json, с модификаторм ->fields в котором по умолчанию должно быть поле Position::make().  Пример:
Json::make('Галерея', 'images')->fields([
    Position::make(),
]),

Так же опираясь на миграцию заполни метод rules, при этом не включай поля которые в миграции помеченны nullable(), так же не включай поле slug

Так же добавь метод filters по следующему шаблону

    protected function filters(): iterable
    {
        return [

        ];
    }

В этом методе должны быть следующие поля:
 'name'
 'type'
________

Для ModelResource админ панели moonshine который находится в файле \app\MoonShine\Resources\PartnerResource.php проставь поля опираясь на миграцию database\migrations\2025_05_19_140453_create_partners_table.php.

В класс ресурса добавь следующие поля:

protected string $title = 'География';
protected string $column = 'name';

Если поля существуют замени в них содержимое.

В метод indexFields вынеси поля:

'title'
'image'
'order'

В методах formFields и detailFields распиши все поля кроме created_at и updated_at

При формировании полей используй ->comment в миграции в качестве имени поля. Пример: Text::make("Заголовок", 'title'),
Для полей миграции с именем img или image используй компонент Image так же добавляй ->dir(''), строку внутри оставляй пустой.  Пример: Image::make('Изображение', 'img')->dir(''),
Для полей миграции с именем slug используй компонент Slug.  Пример: Slug::make("Ссылка", 'slug'),
Для полей миграции с типом boolean используй компонент Switcher.  Пример: Switcher::make('По умолчанию', 'is_default'),
Для полей миграции с именем description используй компонент TinyMce.  Пример: TinyMce::make('Описание', 'description'),
Для полей миграции с типом оson используй компонент Json, с модификаторм ->fields в котором по умолчанию должно быть поле Position::make().  Пример:
Json::make('Галерея', 'images')->fields([
    Position::make(),
]),

Так же опираясь на миграцию заполни метод rules, при этом не включай поля которые в миграции помеченны nullable(), так же не включай поле slug

Так же добавь метод filters по следующему шаблону

    protected function filters(): iterable
    {
        return [

        ];
    }

В этом методе должны быть следующие поля:
'title'

________

Для ModelResource админ панели moonshine который находится в файле \app\MoonShine\Resources\VacancyResource.php проставь поля опираясь на миграцию database\migrations\2025_06_18_052641_create_vacancies_table.php.

В класс ресурса добавь следующие поля:

protected string $title = 'Вакансии';
protected string $column = 'title';

Если поля существуют замени в них содержимое.

В метод indexFields вынеси поля:

'title'
'city'
'company_name'

В методах formFields и detailFields распиши все поля кроме created_at и updated_at

При формировании полей используй ->comment в миграции в качестве имени поля. Пример: Text::make("Заголовок", 'title'),
Для полей миграции с именем img или image используй компонент Image так же добавляй ->dir(''), строку внутри оставляй пустой.  Пример: Image::make('Изображение', 'img')->dir(''),
Для полей миграции с именем slug используй компонент Slug.  Пример: Slug::make("Ссылка", 'slug'),
Для полей миграции с типом boolean используй компонент Switcher.  Пример: Switcher::make('По умолчанию', 'is_default'),
Для полей миграции с именем description используй компонент TinyMce.  Пример: TinyMce::make('Описание', 'description'),
Для полей миграции с типом оson используй компонент Json, с модификаторм ->fields в котором по умолчанию должно быть поле Position::make().  Пример:
Json::make('Галерея', 'images')->fields([
    Position::make(),
]),

Так же опираясь на миграцию заполни метод rules, при этом не включай поля которые в миграции помеченны nullable(), так же не включай поле slug

Так же добавь метод filters по следующему шаблону

    protected function filters(): iterable
    {
        return [

        ];
    }

В этом методе должны быть следующие поля:
'title'
'description'
________

Для ModelResource админ панели moonshine который находится в файле app\MoonShine\Resources\ServiceResource.php проставь поля опираясь на миграцию database\migrations\2025_08_08_120819_create_services_table.php.

В класс ресурса добавь следующие поля:

protected string $title = 'Услуги';
protected string $column = 'title';

Если поля существуют замени в них содержимое.

В метод indexFields вынеси поля:

'title'
'img'

В методах formFields и detailFields распиши все поля кроме created_at и updated_at

При формировании полей используй ->comment в миграции в качестве имени поля. Пример: Text::make("Заголовок", 'title'),
Для полей миграции с именем img или image используй компонент Image так же добавляй ->dir(''), строку внутри оставляй пустой.  Пример: Image::make('Изображение', 'img')->dir(''),
Для полей миграции с именем slug используй компонент Slug.  Пример: Slug::make("Ссылка", 'slug'),
Для полей миграции с типом boolean используй компонент Switcher.  Пример: Switcher::make('По умолчанию', 'is_default'),
Для полей миграции с именем description используй компонент TinyMce.  Пример: TinyMce::make('Описание', 'description'),
Для полей миграции с типом оson используй компонент Json, с модификаторм ->fields в котором по умолчанию должно быть поле Position::make().  Пример:
Json::make('Галерея', 'images')->fields([
    Position::make(),
]),

Так же опираясь на миграцию заполни метод rules, при этом не включай поля которые в миграции помеченны nullable(), так же не включай поле slug

Так же добавь метод filters по следующему шаблону

    protected function filters(): iterable
    {
        return [

        ];
    }

В этом методе должны быть следующие поля:
'title'
'description'
________

Для ModelResource админ панели moonshine который находится в файле app\MoonShine\Resources\ProductResource.php проставь поля опираясь на миграцию database\migrations\2025_06_16_210944_create_products_table.php.

В класс ресурса добавь следующие поля:

protected string $title = 'Услуги';
protected string $column = 'title';

Если поля существуют замени в них содержимое.

В метод indexFields вынеси поля:

'title'
'img'

В методах formFields и detailFields распиши все поля кроме created_at и updated_at

При формировании полей используй ->comment в миграции в качестве имени поля. Пример: Text::make("Заголовок", 'title'),
Для полей миграции с именем img или image используй компонент Image так же добавляй ->dir(''), строку внутри оставляй пустой.  Пример: Image::make('Изображение', 'img')->dir(''),
Для полей миграции с именем slug используй компонент Slug.  Пример: Slug::make("Ссылка", 'slug'),
Для полей миграции с типом boolean используй компонент Switcher.  Пример: Switcher::make('По умолчанию', 'is_default'),
Для полей миграции с именем description используй компонент TinyMce.  Пример: TinyMce::make('Описание', 'description'),
Для полей миграции с типом json используй компонент Json, с модификаторм ->fields в котором по умолчанию должно быть поле Position::make().  Пример:
Json::make('Галерея', 'images')->fields([
    Position::make(),
]),

Так же ко всем полям json добавляй ->removable()

Так же опираясь на миграцию заполни метод rules, при этом не включай поля которые в миграции помеченны nullable(), так же не включай поле slug

Так же добавь метод filters по следующему шаблону

    protected function filters(): iterable
    {
        return [

        ];
    }

В этом методе должны быть следующие поля:
'title'
'description'
________

Для ModelResource админ панели moonshine который находится в файле app\MoonShine\Resources\MetalStructuresResource.php проставь поля опираясь на миграцию database\migrations\2025_06_22_205158_create_metal_structures_table.php.

В класс ресурса добавь следующие поля:

protected string $title = 'Металоконструкции';
protected string $column = 'title';

Если поля существуют замени в них содержимое.

В метод indexFields вынеси поля:

'title'
'img'

В методах formFields и detailFields распиши все поля кроме created_at и updated_at

При формировании полей используй ->comment в миграции в качестве имени поля. Пример: Text::make("Заголовок", 'title'),
Для полей миграции с именем img или image используй компонент Image так же добавляй ->dir(''), строку внутри оставляй пустой.  Пример: Image::make('Изображение', 'img')->dir(''),
Для полей миграции с именем slug используй компонент Slug.  Пример: Slug::make("Ссылка", 'slug'),
Для полей миграции с типом boolean используй компонент Switcher.  Пример: Switcher::make('По умолчанию', 'is_default'),
Для полей миграции с именем description используй компонент TinyMce.  Пример: TinyMce::make('Описание', 'description'),
Для полей миграции с типом json используй компонент Json, с модификаторм ->fields в котором по умолчанию должно быть поле Position::make().  Пример:
Json::make('Галерея', 'images')->fields([
    Position::make(),
]),

Так же ко всем полям json добавляй ->removable()

Так же опираясь на миграцию заполни метод rules, при этом не включай поля которые в миграции помеченны nullable(), так же не включай поле slug

Так же добавь метод filters по следующему шаблону

    protected function filters(): iterable
    {
        return [

        ];
    }

В этом методе должны быть следующие поля:
'title'
'description'
